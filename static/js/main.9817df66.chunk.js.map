{"version":3,"sources":["components/Wrapper.js","components/Card/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Card","alt","name","src","image","onClick","clickImage","id","App","state","symbols","alreadyClicked","score","allScores","highScore","console","log","indexOf","push","setState","Math","max","shuffle","length","array","i","swapIndex","floor","random","currentIndex","indexToSwap","style","display","textAlign","this","map","symbol","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"skCAUeA,MARf,SAAiBC,GACb,OACA,yBAAKC,UAAU,aACdD,EAAME,W,MCQIC,MAVf,SAAcH,GACV,OACE,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,yBACb,yBAAKA,UAAU,UAAUG,IAAKJ,EAAMK,KAAMC,IAAKN,EAAMO,MAAOC,QAAS,kBAAMR,EAAMS,WAAWT,EAAMU,U,OCgE7FC,E,2MAjEbC,MAAQ,CACNC,UACAC,eAAgB,GAChBC,MAAO,EACPC,UAAW,GACXC,UAAW,G,EAgBbR,WAAa,SAAAC,GACXQ,QAAQC,IAAI,4BAA8BT,IACK,IAA3C,EAAKE,MAAME,eAAeM,QAAQV,IACpCQ,QAAQC,IAAI,oBACZ,EAAKP,MAAMI,UAAUK,KAAK,EAAKT,MAAMG,OACrCG,QAAQC,IAAI,EAAKP,MAAMI,WACvB,EAAKM,SAAS,CACZL,UAAWM,KAAKC,IAAL,MAAAD,KAAI,YAAQ,EAAKX,MAAMI,YAClCD,MAAO,EACPD,eAAgB,OAGlB,EAAKF,MAAME,eAAeO,KAAKX,GAC/B,EAAKY,SAAS,CACZT,QAAS,EAAKY,QAAQZ,GACtBE,MAAO,EAAKH,MAAME,eAAeY,QAEjCR,QAAQC,IAAI,EAAKP,U,uEA5Bfe,GACN,IAAK,IAAIC,EAAID,EAAMD,OAAS,EAAGE,EAAI,EAAGA,IAAK,CACzC,IAAMC,EAAYN,KAAKO,MAAMP,KAAKQ,UAAYH,EAAI,IAC5CI,EAAeL,EAAMC,GACrBK,EAAcN,EAAME,GAC1BF,EAAMC,GAAKK,EACXN,EAAME,GAAaG,EAErB,OAAOL,I,+BAyBC,IAAD,OACP,OACE,kBAAC,EAAD,KACE,yBAAK1B,UAAU,oBAAoBiC,MAAO,CAACC,QAAS,QAASC,UAAW,WACpE,wGACA,sCAAYC,KAAKzB,MAAMG,MAAvB,kBAA6CsB,KAAKzB,MAAMK,YAG3DoB,KAAKzB,MAAMC,QAAQyB,KAAI,SAAAC,GAAM,OAC5B,kBAAC,EAAD,CACE9B,WAAY,EAAKA,WACjBC,GAAI6B,EAAO7B,GACX8B,IAAKD,EAAO7B,GACZL,KAAMkC,EAAOlC,KACbE,MAAOgC,EAAOhC,gB,GA1DRkC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9817df66.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Wrapper(props) {\r\n    return (\r\n    <div className=\"container\">\r\n    {props.children}\r\n    </div>\r\n    )\r\n}\r\n  \r\nexport default Wrapper","import React from \"react\"\r\nimport \"./style.css\"\r\n\r\nfunction Card(props) {\r\n    return (\r\n      <div className=\"card mx-auto\">\r\n        <div className=\"img-container mx-auto\">\r\n          <img className=\"mx-auto\" alt={props.name} src={props.image} onClick={() => props.clickImage(props.id)}/>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n    \r\nexport default Card","import React, { Component } from \"react\"\nimport Wrapper from './components/Wrapper'\nimport Card from './components/Card/index'\nimport symbols from './symbols.json'\n\nclass App extends Component {\n  state = {\n    symbols,\n    alreadyClicked: [],\n    score: 0,\n    allScores: [],\n    highScore: 0\n  }\n\n  // SHUFFLE IMAGES\n  // make this a higher order function instead...\n  shuffle(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const swapIndex = Math.floor(Math.random() * (i + 1))\n      const currentIndex = array[i]\n      const indexToSwap = array[swapIndex]\n      array[i] = indexToSwap\n      array[swapIndex] = currentIndex\n    }\n    return array\n  } \n\n  clickImage = id => {\n    console.log(\"testing... card clicked: \" + id)\n    if (this.state.alreadyClicked.indexOf(id) !== -1) {\n      console.log(\"Already Clicked!\")\n      this.state.allScores.push(this.state.score)\n      console.log(this.state.allScores)\n      this.setState({\n        highScore: Math.max(...this.state.allScores),\n        score: 0,\n        alreadyClicked: []\n      })\n    } else {\n      this.state.alreadyClicked.push(id)\n      this.setState({\n        symbols: this.shuffle(symbols),\n        score: this.state.alreadyClicked.length\n      },\n        console.log(this.state)\n      )  \n    }\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <div className=\"navbar sticky-top\" style={{display: \"block\", textAlign: \"center\"}}>\n            <h4>Click an image to earn a point. Remember not to click it more than once!</h4>\n            <h2>Score: {this.state.score} | High Score: {this.state.highScore}</h2>\n        </div>\n\n        {this.state.symbols.map(symbol => (\n          <Card\n            clickImage={this.clickImage}\n            id={symbol.id}\n            key={symbol.id}\n            name={symbol.name}\n            image={symbol.image}\n          />\n        ))}\n      </Wrapper>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}